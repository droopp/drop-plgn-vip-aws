#!/usr/bin/python

import sys
import time
import subprocess
import os


# API
def log(m):
    sys.stderr.write("{}: {}\n".format(time.time(), m))
    sys.stderr.flush()


def retry(fn):

    def wrap(*args):

        while 1:
            try:
                r = fn(*args)
                return r
            except Exception as e:
                log("retry...{}: {}".format(fn, e))
                time.sleep(1)
                sys.exit(1)
                continue

    return wrap


@retry
def down_eip(instance_id, iface, private_ip, public_ip):

    subnet_id = subprocess.check_output(['aws ec2 describe-instances --instance-ids %s | jq .Reservations[].Instances[].NetworkInterfaces[].SubnetId' % instance_id], shell=True).strip().strip('"').strip().strip('"')
    subnet_cidr = subprocess.check_output(['aws ec2 describe-subnets --subnet-ids %s | jq .Subnets[].CidrBlock' % subnet_id], shell=True).strip().strip('"')
    cidr_prefix = subnet_cidr.split("/")[1]

    # Del the private IP address to the default network interface

    try:
        subprocess.check_call(['sudo ip addr del dev %s %s/%s' % (iface, private_ip, cidr_prefix)], shell=True)
    except Exception as e:
        log("addr dev {}".format(e))

    # EIP
    # eip = subprocess.check_output(['aws ec2 disassociate-address --public-ip %s' % (public_ip)], shell=True).strip().strip('"').strip().strip('"')


@retry
def down_private_vip(private_ip):

    instance_id = subprocess.check_output(['/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id'], shell=True)
    interface_id = subprocess.check_output(['aws ec2 describe-instances --instance-ids %s | jq .Reservations[].Instances[].NetworkInterfaces[].NetworkInterfaceId' % instance_id], shell=True).strip().strip('"')

    ret = subprocess.check_output(['aws ec2 unassign-private-ip-addresses --network-interface-id %s --private-ip-addresses %s ; exit 0' % (interface_id, private_ip)], shell=True, stderr=subprocess.STDOUT).strip()

    log("unassign error: {}".format(ret))

    if ret.find("addresses are not assigned to interface") == -1:
        raise Exception(ret)

    return instance_id


def down_vip(iface, private_vip):

    cmds = [
        "sudo ifconfig {iface}:0 down",
    ]

    for c in cmds:
        try:
            subprocess.check_call([c.format(**{"iface": iface, "vip": private_vip})], shell=True)
        except Exception as e:
            log(e)


def main(iface, private_ip):

    log("down private vip {} {}".format(iface, private_ip))

    # clear vip if none
    if private_ip == "none":
        private_ip = subprocess.check_output(["ip addr|grep secondary|awk '{print $2}'; exit 0"], shell=True, stderr=subprocess.STDOUT).strip().split("/")[0]
        if private_ip == "":
            return

    instance_id = down_private_vip(private_ip)
    log("down private vip - instance_id {}".format(instance_id))

    public_ip = os.environ.get("DROP_AWS_EIP")

    if public_ip is None:
        log("EIP not defined..")
        down_vip(iface, private_ip)
    else:
        down_eip(instance_id, iface, private_ip, public_ip)


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
