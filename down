#!/usr/bin/python

import sys
import time
import subprocess
import os


# API
def log(m):
    sys.stderr.write("{}: {}\n".format(time.time(), m))
    sys.stderr.flush()


def retry(fn):

    def wrap(*args):

        while 1:
            try:
                r = fn(*args)
                return r
            except Exception as e:
                log("retry...{}: {}".format(fn, e))
                time.sleep(1)
                continue

    return wrap


@retry
def down_eip(iface, private_ip, public_ip):
    instance_id = subprocess.check_output(['/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id'], shell=True)

    subnet_id = subprocess.check_output(['aws ec2 describe-instances --instance-ids %s | jq .Reservations[].Instances[].NetworkInterfaces[].SubnetId' % instance_id], shell=True).strip().strip('"').strip().strip('"')
    subnet_cidr = subprocess.check_output(['aws ec2 describe-subnets --subnet-ids %s | jq .Subnets[].CidrBlock' % subnet_id], shell=True).strip().strip('"')
    cidr_prefix = subnet_cidr.split("/")[1]

    # Del the private IP address to the default network interface

    try:
        subprocess.check_call(['sudo ip addr del dev %s %s/%s' % (iface, private_ip, cidr_prefix)], shell=True)
    except Exception as e:
        log("addr dev {}".format(e))


def down_vip(iface, private_ip):

    cmds = [
        "sudo ifconfig {iface}:0 down",
    ]

    for c in cmds:
        subprocess.check_call([c.format(**{"iface": iface, "vip": private_ip})], shell=True)


def main(iface, private_ip):

    log("down private vip {} {}".format(iface, private_ip))

    public_ip = os.environ.get("DROP_AWS_EIP")

    if public_ip is None:
        log("EIP not defined..")
        down_vip(iface, private_ip)
    else:
        down_eip(iface, private_ip, public_ip)


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
